package message;

message Node {
  
  enum MsgType {
    NODE  = 0;
    DONE  = 1;
    START = 2;
  }

  enum NodeStatus {
    SOLVED       = 0;       ///< Node representing a solution
    FAILED       = 1;       ///< Node representing failure
    BRANCH       = 2;       ///< Node representing a branch
    UNDETERMINED = 3;       ///< Node that has not been explored yet
    STOP         = 4;       ///< Node representing stop point
    UNSTOP       = 5;       ///< Node representing ignored stop point
    SKIPPED      = 6;       ///< Skipped by backjumping
    MERGING      = 7;
  }

  required MsgType type = 1;

  optional int32 sid  = 2;
  optional int32 pid  = 3;
  optional int32 alt  = 4;
  optional int32 kids = 5;

  optional NodeStatus status  = 6;
  optional int32  restart_id  = 7;
  optional uint64 time        = 8;
  optional int32  thread_id   = 9;
  optional string label       = 10;
  optional float  domain_size = 11;
}